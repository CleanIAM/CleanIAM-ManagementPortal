/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customFetch } from '../custom-fetch';
export interface ApiApplicationModel {
  /** Gets or sets the id associated with the application. */
  id: string;
  applicationType: ApplicationType;
  /** Gets or sets the client identifier associated with the application. */
  clientId: string;
  clientType: ClientType;
  consentType: ConsentType;
  /**
   * Gets or sets the display name associated with the application.
   * @nullable
   */
  displayName: string | null;
  /** Allowed scopes for the application. */
  scopes: string[];
  /** Allowed endpoints for the application. */
  endpoints: string[];
  /** Allowed grant types for the application. */
  grantTypes: string[];
  /** Allowed response types for the application. */
  responseTypes: string[];
  /** Gets the post-logout redirect URIs associated with the application. */
  postLogoutRedirectUris: string[];
  /** Gets the redirect URIs associated with the application. */
  redirectUris: string[];
  /** Gets the requirements associated with the application. */
  requirements: string[];
}

/**
 * Api user model
 */
export interface ApiUserModel {
  /** Id of the user */
  id: string;
  /** Email of the user */
  email: string;
  /** First name of the user */
  firstName: string;
  /** last name of the user */
  lastName: string;
  /** User roles */
  roles: UserRole[];
}

export type ApplicationType = typeof ApplicationType[keyof typeof ApplicationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationType = {
  native: 'native',
  web: 'web',
} as const;

export type ClientType = typeof ClientType[keyof typeof ClientType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClientType = {
  public: 'public',
  confidential: 'confidential',
} as const;

export type ConsentType = typeof ConsentType[keyof typeof ConsentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConsentType = {
  explicit: 'explicit',
  external: 'external',
  implicit: 'implicit',
  systematic: 'systematic',
} as const;

export interface Error {
  message: string;
  code: number;
}

/**
 * Gets the additional properties associated with the application.
 */
export type OpenIdApplicationProperties = {[key: string]: unknown};

export interface OpenIdApplication {
  /** Gets or sets the id associated with the application. */
  id: string;
  applicationType: ApplicationType;
  /** Gets or sets the client identifier associated with the application. */
  clientId: string;
  clientType: ClientType;
  consentType: ConsentType;
  /**
   * Gets or sets the display name associated with the application.
   * @nullable
   */
  displayName: string | null;
  /** Allowed scopes for the application. */
  scopes: string[];
  /** Allowed endpoints for the application. */
  endpoints: string[];
  /** Allowed grant types for the application. */
  grantTypes: string[];
  /** Allowed response types for the application. */
  responseTypes: string[];
  /** Gets the post-logout redirect URIs associated with the application. */
  postLogoutRedirectUris: string[];
  /** Gets the additional properties associated with the application. */
  properties: OpenIdApplicationProperties;
  /** Gets the redirect URIs associated with the application. */
  redirectUris: string[];
}

export type OpenIdApplicationCreatedSettings = {[key: string]: string};

export interface OpenIdApplicationCreated {
  id: string;
  applicationType: ApplicationType;
  clientId: string;
  /** @nullable */
  clientSecret: string | null;
  clientType: ClientType;
  consentType: ConsentType;
  /** @nullable */
  displayName: string | null;
  permissions: string[];
  postLogoutRedirectUris: string[];
  redirectUris: string[];
  requirements: string[];
  settings: OpenIdApplicationCreatedSettings;
}

export interface OpenIdApplicationDeleted {
  id: string;
  displayName: string;
}

export type OpenIdApplicationUpdatedSettings = {[key: string]: string};

export interface OpenIdApplicationUpdated {
  id: string;
  applicationType: ApplicationType;
  clientId: string;
  clientType: ClientType;
  consentType: ConsentType;
  /** @nullable */
  displayName: string | null;
  permissions: string[];
  postLogoutRedirectUris: string[];
  redirectUris: string[];
  requirements: string[];
  settings: OpenIdApplicationUpdatedSettings;
}

export interface UpdateApplicationRequest {
  /** Gets or sets the id associated with the application. */
  id: string;
  applicationType: ApplicationType;
  /** Gets or sets the client identifier associated with the application. */
  clientId: string;
  clientType: ClientType;
  consentType: ConsentType;
  /**
   * Gets or sets the display name associated with the application.
   * @nullable
   */
  displayName: string | null;
  /** Allowed scopes for the application. */
  scopes: string[];
  /** Allowed endpoints for the application. */
  endpoints: string[];
  /** Allowed grant types for the application. */
  grantTypes: string[];
  /** Allowed response types for the application. */
  responseTypes: string[];
  /** Gets the post-logout redirect URIs associated with the application. */
  postLogoutRedirectUris: string[];
  /** Gets the redirect URIs associated with the application. */
  redirectUris: string[];
  /** Gets the requirements associated with the application. */
  requirements: string[];
}

export interface UserCreated {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  roles: UserRole[];
}

export interface UserDeleted {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  roles: UserRole[];
}

export type UserRole = typeof UserRole[keyof typeof UserRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  user: 'user',
  admin: 'admin',
  superAdmin: 'superAdmin',
} as const;

export interface UserUpdated {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  roles: UserRole[];
}

export type PostApiApplicationsParams = {
/**
 * Gets or sets the id associated with the application.
 */
Id?: string;
/**
 * Gets or sets the application type associated with the application.
 */
ApplicationType?: ApplicationType;
/**
 * Gets or sets the client identifier associated with the application.
 */
ClientId?: string;
/**
 * Gets or sets the client type associated with the application.
 */
ClientType?: ClientType;
/**
 * Gets or sets the consent type associated with the application.
 */
ConsentType?: ConsentType;
/**
 * Gets or sets the display name associated with the application.
 */
DisplayName?: string;
/**
 * Allowed scopes for the application.
 */
Scopes?: string[];
/**
 * Allowed endpoints for the application.
 */
Endpoints?: string[];
/**
 * Allowed grant types for the application.
 */
GrantTypes?: string[];
/**
 * Allowed response types for the application.
 */
ResponseTypes?: string[];
/**
 * Gets the post-logout redirect URIs associated with the application.
 */
PostLogoutRedirectUris?: string[];
/**
 * Gets the redirect URIs associated with the application.
 */
RedirectUris?: string[];
/**
 * Gets the requirements associated with the application.
 */
Requirements?: string[];
};

export type PostApiUsersParams = {
/**
 * Email of the user
 */
Email: string;
/**
 * First name of the user
 */
FirstName: string;
/**
 * last name of the user
 */
LastName: string;
/**
 * User roles
 */
Roles: UserRole[];
};

export type GetApiUsersIdguidParams = {
/**
 * Id of the user to get
 */
id?: string;
};

export type PutApiUsersIdguidParams = {
/**
 * Id of user to update
 */
id?: string;
/**
 * Email of the user
 */
Email: string;
/**
 * First name of the user
 */
FirstName: string;
/**
 * last name of the user
 */
LastName: string;
/**
 * User roles
 */
Roles: UserRole[];
};

export type DeleteApiUsersIdguidParams = {
/**
 * Id of user to be deleted
 */
id?: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Show the main application page with a list of all applications.
 */
export const getApiApplications = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<ApiApplicationModel[]>(
      {url: `/api/applications`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiApplicationsQueryKey = () => {
    return [`/api/applications`] as const;
    }

    
export const getGetApiApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApplicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplications>>> = ({ signal }) => getApiApplications(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApplications>>>
export type GetApiApplicationsQueryError = unknown


export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplications>>,
          TError,
          Awaited<ReturnType<typeof getApiApplications>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplications>>,
          TError,
          Awaited<ReturnType<typeof getApiApplications>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Show the main application page with a list of all applications.
 */

export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiApplicationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new application
 */
export const postApiApplications = (
    params?: PostApiApplicationsParams,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<OpenIdApplicationCreated>(
      {url: `/api/applications`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostApiApplicationsMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext> => {
    
const mutationKey = ['postApiApplications'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiApplications>>, {params?: PostApiApplicationsParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiApplications(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiApplicationsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiApplications>>>
    
    export type PostApiApplicationsMutationError = Error

    /**
 * @summary Create new application
 */
export const usePostApiApplications = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiApplications>>,
        TError,
        {params?: PostApiApplicationsParams},
        TContext
      > => {

      const mutationOptions = getPostApiApplicationsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get the application with the given id.
 */
export const getApiApplicationsId = (
    id: string,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<OpenIdApplication>(
      {url: `/api/applications/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiApplicationsIdQueryKey = (id: string,) => {
    return [`/api/applications/${id}`] as const;
    }

    
export const getGetApiApplicationsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApplicationsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplicationsId>>> = ({ signal }) => getApiApplicationsId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiApplicationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApplicationsId>>>
export type GetApiApplicationsIdQueryError = Error


export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the application with the given id.
 */

export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiApplicationsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update the application with the given id.
 */
export const putApiApplicationsId = (
    id: string,
    updateApplicationRequest: UpdateApplicationRequest,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<OpenIdApplicationUpdated>(
      {url: `/api/applications/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateApplicationRequest
    },
      options);
    }
  


export const getPutApiApplicationsIdMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext> => {
    
const mutationKey = ['putApiApplicationsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiApplicationsId>>, {id: string;data: UpdateApplicationRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiApplicationsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiApplicationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiApplicationsId>>>
    export type PutApiApplicationsIdMutationBody = UpdateApplicationRequest
    export type PutApiApplicationsIdMutationError = Error

    /**
 * @summary Update the application with the given id.
 */
export const usePutApiApplicationsId = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiApplicationsId>>,
        TError,
        {id: string;data: UpdateApplicationRequest},
        TContext
      > => {

      const mutationOptions = getPutApiApplicationsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Update the application with the given id.
 */
export const deleteApiApplicationsId = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<OpenIdApplicationDeleted>(
      {url: `/api/applications/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiApplicationsIdMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiApplicationsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiApplicationsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiApplicationsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiApplicationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiApplicationsId>>>
    
    export type DeleteApiApplicationsIdMutationError = Error

    /**
 * @summary Update the application with the given id.
 */
export const useDeleteApiApplicationsId = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiApplicationsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiApplicationsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Test endpoint to check if the API is up and running.
 */
export const getTest = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<string>(
      {url: `/test`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTestQueryKey = () => {
    return [`/test`] as const;
    }

    
export const getGetTestQueryOptions = <TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTest>>> = ({ signal }) => getTest(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestQueryResult = NonNullable<Awaited<ReturnType<typeof getTest>>>
export type GetTestQueryError = unknown


export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTest>>,
          TError,
          Awaited<ReturnType<typeof getTest>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTest>>,
          TError,
          Awaited<ReturnType<typeof getTest>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test endpoint to check if the API is up and running.
 */

export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTestQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all users
 */
export const getApiUsers = (
    
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<ApiUserModel[]>(
      {url: `/api/users`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiUsersQueryKey = () => {
    return [`/api/users`] as const;
    }

    
export const getGetApiUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) => getApiUsers(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersQueryError = Error


export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all users
 */

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new user
 */
export const postApiUsers = (
    params: PostApiUsersParams,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<UserCreated>(
      {url: `/api/users`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getPostApiUsersMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext> => {
    
const mutationKey = ['postApiUsers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsers>>, {params: PostApiUsersParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiUsers(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsers>>>
    
    export type PostApiUsersMutationError = Error

    /**
 * @summary Create new user
 */
export const usePostApiUsers = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiUsers>>,
        TError,
        {params: PostApiUsersParams},
        TContext
      > => {

      const mutationOptions = getPostApiUsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get specific user by its id
 */
export const getApiUsersIdguid = (
    params?: GetApiUsersIdguidParams,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<ApiUserModel>(
      {url: `/api/users/id:guid`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiUsersIdguidQueryKey = (params?: GetApiUsersIdguidParams,) => {
    return [`/api/users/id:guid`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersIdguidQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersIdguidQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersIdguid>>> = ({ signal }) => getApiUsersIdguid(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersIdguidQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersIdguid>>>
export type GetApiUsersIdguidQueryError = Error


export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params: undefined |  GetApiUsersIdguidParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdguid>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdguid>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdguid>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdguid>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get specific user by its id
 */

export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersIdguidQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update user
 */
export const putApiUsersIdguid = (
    params: PutApiUsersIdguidParams,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<UserUpdated>(
      {url: `/api/users/id:guid`, method: 'PUT',
        params
    },
      options);
    }
  


export const getPutApiUsersIdguidMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext> => {
    
const mutationKey = ['putApiUsersIdguid'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersIdguid>>, {params: PutApiUsersIdguidParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiUsersIdguid(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersIdguidMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersIdguid>>>
    
    export type PutApiUsersIdguidMutationError = Error

    /**
 * @summary Update user
 */
export const usePutApiUsersIdguid = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersIdguid>>,
        TError,
        {params: PutApiUsersIdguidParams},
        TContext
      > => {

      const mutationOptions = getPutApiUsersIdguidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete user
 */
export const deleteApiUsersIdguid = (
    params?: DeleteApiUsersIdguidParams,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<UserDeleted>(
      {url: `/api/users/id:guid`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteApiUsersIdguidMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext> => {
    
const mutationKey = ['deleteApiUsersIdguid'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, {params?: DeleteApiUsersIdguidParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiUsersIdguid(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUsersIdguidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsersIdguid>>>
    
    export type DeleteApiUsersIdguidMutationError = Error

    /**
 * @summary Delete user
 */
export const useDeleteApiUsersIdguid = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUsersIdguid>>,
        TError,
        {params?: DeleteApiUsersIdguidParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiUsersIdguidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
