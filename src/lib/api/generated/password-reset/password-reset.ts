/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetPasswordResetParams,
  GetPasswordResetRequestIdParams,
  PostPasswordResetBody,
  PostPasswordResetParams,
  PostPasswordResetRequestIdBody,
  PostPasswordResetRequestIdParams
} from '../cleanIAM.schemas';

import { customAxiosRequest } from '../../mutator/axios/custom-axios';

/**
 * @summary Show the form where the user fills in his email, and if the email is valid, a password reset request is sent.
 */
export const getPasswordReset = (params?: GetPasswordResetParams, signal?: AbortSignal) => {
  return customAxiosRequest<void>({ url: `/password-reset`, method: 'GET', params, signal });
};

export const getGetPasswordResetQueryKey = (params?: GetPasswordResetParams) => {
  return [`/password-reset`, ...(params ? [params] : [])] as const;
};

export const getGetPasswordResetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPasswordReset>>,
  TError = unknown
>(
  params?: GetPasswordResetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPasswordReset>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPasswordResetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPasswordReset>>> = ({ signal }) =>
    getPasswordReset(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPasswordReset>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPasswordResetQueryResult = NonNullable<Awaited<ReturnType<typeof getPasswordReset>>>;
export type GetPasswordResetQueryError = unknown;

export function useGetPasswordReset<
  TData = Awaited<ReturnType<typeof getPasswordReset>>,
  TError = unknown
>(
  params: undefined | GetPasswordResetParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPasswordReset>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPasswordReset>>,
          TError,
          Awaited<ReturnType<typeof getPasswordReset>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPasswordReset<
  TData = Awaited<ReturnType<typeof getPasswordReset>>,
  TError = unknown
>(
  params?: GetPasswordResetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPasswordReset>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPasswordReset>>,
          TError,
          Awaited<ReturnType<typeof getPasswordReset>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPasswordReset<
  TData = Awaited<ReturnType<typeof getPasswordReset>>,
  TError = unknown
>(
  params?: GetPasswordResetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPasswordReset>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Show the form where the user fills in his email, and if the email is valid, a password reset request is sent.
 */

export function useGetPasswordReset<
  TData = Awaited<ReturnType<typeof getPasswordReset>>,
  TError = unknown
>(
  params?: GetPasswordResetParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPasswordReset>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPasswordResetQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Handle the form submission with email for the password reset request.
 */
export const postPasswordReset = (
  postPasswordResetBody: PostPasswordResetBody,
  params?: PostPasswordResetParams,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  formData.append('Email', postPasswordResetBody.Email);

  return customAxiosRequest<void>({
    url: `/password-reset`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
    signal
  });
};

export const getPostPasswordResetMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPasswordReset>>,
    TError,
    { data: PostPasswordResetBody; params?: PostPasswordResetParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPasswordReset>>,
  TError,
  { data: PostPasswordResetBody; params?: PostPasswordResetParams },
  TContext
> => {
  const mutationKey = ['postPasswordReset'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPasswordReset>>,
    { data: PostPasswordResetBody; params?: PostPasswordResetParams }
  > = props => {
    const { data, params } = props ?? {};

    return postPasswordReset(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPasswordReset>>
>;
export type PostPasswordResetMutationBody = PostPasswordResetBody;
export type PostPasswordResetMutationError = unknown;

/**
 * @summary Handle the form submission with email for the password reset request.
 */
export const usePostPasswordReset = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postPasswordReset>>,
      TError,
      { data: PostPasswordResetBody; params?: PostPasswordResetParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postPasswordReset>>,
  TError,
  { data: PostPasswordResetBody; params?: PostPasswordResetParams },
  TContext
> => {
  const mutationOptions = getPostPasswordResetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * User is redirected to this page via a link in email
 * @summary Show the form where the user can set a new password.
 */
export const getPasswordResetRequestId = (
  requestId: string,
  params?: GetPasswordResetRequestIdParams,
  signal?: AbortSignal
) => {
  return customAxiosRequest<void>({
    url: `/password-reset/${requestId}`,
    method: 'GET',
    params,
    signal
  });
};

export const getGetPasswordResetRequestIdQueryKey = (
  requestId: string,
  params?: GetPasswordResetRequestIdParams
) => {
  return [`/password-reset/${requestId}`, ...(params ? [params] : [])] as const;
};

export const getGetPasswordResetRequestIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPasswordResetRequestId>>,
  TError = unknown
>(
  requestId: string,
  params?: GetPasswordResetRequestIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPasswordResetRequestId>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPasswordResetRequestIdQueryKey(requestId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPasswordResetRequestId>>> = ({
    signal
  }) => getPasswordResetRequestId(requestId, params, signal);

  return { queryKey, queryFn, enabled: !!requestId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPasswordResetRequestId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPasswordResetRequestIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPasswordResetRequestId>>
>;
export type GetPasswordResetRequestIdQueryError = unknown;

export function useGetPasswordResetRequestId<
  TData = Awaited<ReturnType<typeof getPasswordResetRequestId>>,
  TError = unknown
>(
  requestId: string,
  params: undefined | GetPasswordResetRequestIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPasswordResetRequestId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPasswordResetRequestId>>,
          TError,
          Awaited<ReturnType<typeof getPasswordResetRequestId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPasswordResetRequestId<
  TData = Awaited<ReturnType<typeof getPasswordResetRequestId>>,
  TError = unknown
>(
  requestId: string,
  params?: GetPasswordResetRequestIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPasswordResetRequestId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPasswordResetRequestId>>,
          TError,
          Awaited<ReturnType<typeof getPasswordResetRequestId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPasswordResetRequestId<
  TData = Awaited<ReturnType<typeof getPasswordResetRequestId>>,
  TError = unknown
>(
  requestId: string,
  params?: GetPasswordResetRequestIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPasswordResetRequestId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Show the form where the user can set a new password.
 */

export function useGetPasswordResetRequestId<
  TData = Awaited<ReturnType<typeof getPasswordResetRequestId>>,
  TError = unknown
>(
  requestId: string,
  params?: GetPasswordResetRequestIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPasswordResetRequestId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPasswordResetRequestIdQueryOptions(requestId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Handle the form submission with new password for the password reset request.
 */
export const postPasswordResetRequestId = (
  requestId: string,
  postPasswordResetRequestIdBody: PostPasswordResetRequestIdBody,
  params?: PostPasswordResetRequestIdParams,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  formData.append('RequestId', postPasswordResetRequestIdBody.RequestId);
  formData.append('NewPassword', postPasswordResetRequestIdBody.NewPassword);
  formData.append('ConfirmPassword', postPasswordResetRequestIdBody.ConfirmPassword);

  return customAxiosRequest<void>({
    url: `/password-reset/${requestId}`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
    signal
  });
};

export const getPostPasswordResetRequestIdMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPasswordResetRequestId>>,
    TError,
    {
      requestId: string;
      data: PostPasswordResetRequestIdBody;
      params?: PostPasswordResetRequestIdParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPasswordResetRequestId>>,
  TError,
  {
    requestId: string;
    data: PostPasswordResetRequestIdBody;
    params?: PostPasswordResetRequestIdParams;
  },
  TContext
> => {
  const mutationKey = ['postPasswordResetRequestId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPasswordResetRequestId>>,
    {
      requestId: string;
      data: PostPasswordResetRequestIdBody;
      params?: PostPasswordResetRequestIdParams;
    }
  > = props => {
    const { requestId, data, params } = props ?? {};

    return postPasswordResetRequestId(requestId, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPasswordResetRequestIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPasswordResetRequestId>>
>;
export type PostPasswordResetRequestIdMutationBody = PostPasswordResetRequestIdBody;
export type PostPasswordResetRequestIdMutationError = unknown;

/**
 * @summary Handle the form submission with new password for the password reset request.
 */
export const usePostPasswordResetRequestId = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postPasswordResetRequestId>>,
      TError,
      {
        requestId: string;
        data: PostPasswordResetRequestIdBody;
        params?: PostPasswordResetRequestIdParams;
      },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postPasswordResetRequestId>>,
  TError,
  {
    requestId: string;
    data: PostPasswordResetRequestIdBody;
    params?: PostPasswordResetRequestIdParams;
  },
  TContext
> => {
  const mutationOptions = getPostPasswordResetRequestIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
