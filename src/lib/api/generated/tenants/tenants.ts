/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiTenantModel,
  CreateNewTenantRequest,
  Error,
  GetApiTenantsParams,
  GetApiTenantsTenantIdParams,
  NewTenantCreated,
  PostApiTenantsParams,
  PutApiTenantsTenantIdParams,
  PutApiTenantsTenantIdUsersUserIdParams,
  TenantUpdated,
  UpdateTenantRequest,
  UserAssignedToTenant
} from '../cleanIAM.schemas';

import { customAxiosRequest } from '../../mutator/axios/custom-axios';

/**
 * @summary Get all tenants in the system
 */
export const getApiTenants = (params?: GetApiTenantsParams, signal?: AbortSignal) => {
  return customAxiosRequest<ApiTenantModel[]>({
    url: `/api/tenants`,
    method: 'GET',
    params,
    signal
  });
};

export const getGetApiTenantsQueryKey = (params?: GetApiTenantsParams) => {
  return [`/api/tenants`, ...(params ? [params] : [])] as const;
};

export const getGetApiTenantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTenants>>,
  TError = Error
>(
  params?: GetApiTenantsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTenantsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTenants>>> = ({ signal }) =>
    getApiTenants(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTenants>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTenantsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTenants>>>;
export type GetApiTenantsQueryError = Error;

export function useGetApiTenants<TData = Awaited<ReturnType<typeof getApiTenants>>, TError = Error>(
  params: undefined | GetApiTenantsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTenants>>,
          TError,
          Awaited<ReturnType<typeof getApiTenants>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiTenants<TData = Awaited<ReturnType<typeof getApiTenants>>, TError = Error>(
  params?: GetApiTenantsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTenants>>,
          TError,
          Awaited<ReturnType<typeof getApiTenants>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiTenants<TData = Awaited<ReturnType<typeof getApiTenants>>, TError = Error>(
  params?: GetApiTenantsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all tenants in the system
 */

export function useGetApiTenants<TData = Awaited<ReturnType<typeof getApiTenants>>, TError = Error>(
  params?: GetApiTenantsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiTenantsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create a new tenant
 */
export const postApiTenants = (
  createNewTenantRequest: CreateNewTenantRequest,
  params?: PostApiTenantsParams,
  signal?: AbortSignal
) => {
  return customAxiosRequest<NewTenantCreated>({
    url: `/api/tenants`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createNewTenantRequest,
    params,
    signal
  });
};

export const getPostApiTenantsMutationOptions = <TError = Error, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTenants>>,
    TError,
    { data: CreateNewTenantRequest; params?: PostApiTenantsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTenants>>,
  TError,
  { data: CreateNewTenantRequest; params?: PostApiTenantsParams },
  TContext
> => {
  const mutationKey = ['postApiTenants'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTenants>>,
    { data: CreateNewTenantRequest; params?: PostApiTenantsParams }
  > = props => {
    const { data, params } = props ?? {};

    return postApiTenants(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTenantsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTenants>>>;
export type PostApiTenantsMutationBody = CreateNewTenantRequest;
export type PostApiTenantsMutationError = Error;

/**
 * @summary Create a new tenant
 */
export const usePostApiTenants = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiTenants>>,
      TError,
      { data: CreateNewTenantRequest; params?: PostApiTenantsParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postApiTenants>>,
  TError,
  { data: CreateNewTenantRequest; params?: PostApiTenantsParams },
  TContext
> => {
  const mutationOptions = getPostApiTenantsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a tenant by Id
 */
export const getApiTenantsTenantId = (
  tenantId: string,
  params?: GetApiTenantsTenantIdParams,
  signal?: AbortSignal
) => {
  return customAxiosRequest<ApiTenantModel>({
    url: `/api/tenants/${tenantId}`,
    method: 'GET',
    params,
    signal
  });
};

export const getGetApiTenantsTenantIdQueryKey = (
  tenantId: string,
  params?: GetApiTenantsTenantIdParams
) => {
  return [`/api/tenants/${tenantId}`, ...(params ? [params] : [])] as const;
};

export const getGetApiTenantsTenantIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTenantsTenantId>>,
  TError = Error
>(
  tenantId: string,
  params?: GetApiTenantsTenantIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTenantsTenantId>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTenantsTenantIdQueryKey(tenantId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTenantsTenantId>>> = ({ signal }) =>
    getApiTenantsTenantId(tenantId, params, signal);

  return { queryKey, queryFn, enabled: !!tenantId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTenantsTenantId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTenantsTenantIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTenantsTenantId>>
>;
export type GetApiTenantsTenantIdQueryError = Error;

export function useGetApiTenantsTenantId<
  TData = Awaited<ReturnType<typeof getApiTenantsTenantId>>,
  TError = Error
>(
  tenantId: string,
  params: undefined | GetApiTenantsTenantIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTenantsTenantId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTenantsTenantId>>,
          TError,
          Awaited<ReturnType<typeof getApiTenantsTenantId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiTenantsTenantId<
  TData = Awaited<ReturnType<typeof getApiTenantsTenantId>>,
  TError = Error
>(
  tenantId: string,
  params?: GetApiTenantsTenantIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTenantsTenantId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTenantsTenantId>>,
          TError,
          Awaited<ReturnType<typeof getApiTenantsTenantId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiTenantsTenantId<
  TData = Awaited<ReturnType<typeof getApiTenantsTenantId>>,
  TError = Error
>(
  tenantId: string,
  params?: GetApiTenantsTenantIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTenantsTenantId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get a tenant by Id
 */

export function useGetApiTenantsTenantId<
  TData = Awaited<ReturnType<typeof getApiTenantsTenantId>>,
  TError = Error
>(
  tenantId: string,
  params?: GetApiTenantsTenantIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTenantsTenantId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiTenantsTenantIdQueryOptions(tenantId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update an existing tenant
 */
export const putApiTenantsTenantId = (
  tenantId: string,
  updateTenantRequest: UpdateTenantRequest,
  params?: PutApiTenantsTenantIdParams
) => {
  return customAxiosRequest<TenantUpdated>({
    url: `/api/tenants/${tenantId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateTenantRequest,
    params
  });
};

export const getPutApiTenantsTenantIdMutationOptions = <
  TError = Error,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiTenantsTenantId>>,
    TError,
    { tenantId: string; data: UpdateTenantRequest; params?: PutApiTenantsTenantIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiTenantsTenantId>>,
  TError,
  { tenantId: string; data: UpdateTenantRequest; params?: PutApiTenantsTenantIdParams },
  TContext
> => {
  const mutationKey = ['putApiTenantsTenantId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiTenantsTenantId>>,
    { tenantId: string; data: UpdateTenantRequest; params?: PutApiTenantsTenantIdParams }
  > = props => {
    const { tenantId, data, params } = props ?? {};

    return putApiTenantsTenantId(tenantId, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiTenantsTenantIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiTenantsTenantId>>
>;
export type PutApiTenantsTenantIdMutationBody = UpdateTenantRequest;
export type PutApiTenantsTenantIdMutationError = Error;

/**
 * @summary Update an existing tenant
 */
export const usePutApiTenantsTenantId = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiTenantsTenantId>>,
      TError,
      { tenantId: string; data: UpdateTenantRequest; params?: PutApiTenantsTenantIdParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putApiTenantsTenantId>>,
  TError,
  { tenantId: string; data: UpdateTenantRequest; params?: PutApiTenantsTenantIdParams },
  TContext
> => {
  const mutationOptions = getPutApiTenantsTenantIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Assign a user to a tenant
 */
export const putApiTenantsTenantIdUsersUserId = (
  tenantId: string,
  userId: string,
  params?: PutApiTenantsTenantIdUsersUserIdParams
) => {
  return customAxiosRequest<UserAssignedToTenant>({
    url: `/api/tenants/${tenantId}/users/${userId}`,
    method: 'PUT',
    params
  });
};

export const getPutApiTenantsTenantIdUsersUserIdMutationOptions = <
  TError = Error,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiTenantsTenantIdUsersUserId>>,
    TError,
    { tenantId: string; userId: string; params?: PutApiTenantsTenantIdUsersUserIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiTenantsTenantIdUsersUserId>>,
  TError,
  { tenantId: string; userId: string; params?: PutApiTenantsTenantIdUsersUserIdParams },
  TContext
> => {
  const mutationKey = ['putApiTenantsTenantIdUsersUserId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiTenantsTenantIdUsersUserId>>,
    { tenantId: string; userId: string; params?: PutApiTenantsTenantIdUsersUserIdParams }
  > = props => {
    const { tenantId, userId, params } = props ?? {};

    return putApiTenantsTenantIdUsersUserId(tenantId, userId, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiTenantsTenantIdUsersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiTenantsTenantIdUsersUserId>>
>;

export type PutApiTenantsTenantIdUsersUserIdMutationError = Error;

/**
 * @summary Assign a user to a tenant
 */
export const usePutApiTenantsTenantIdUsersUserId = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiTenantsTenantIdUsersUserId>>,
      TError,
      { tenantId: string; userId: string; params?: PutApiTenantsTenantIdUsersUserIdParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putApiTenantsTenantIdUsersUserId>>,
  TError,
  { tenantId: string; userId: string; params?: PutApiTenantsTenantIdUsersUserIdParams },
  TContext
> => {
  const mutationOptions = getPutApiTenantsTenantIdUsersUserIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
