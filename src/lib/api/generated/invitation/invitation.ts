/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult
} from '@tanstack/react-query';

import type { GetInvitationParams } from '../cleanIAM.schemas';

import { customAxiosRequest } from '../../axios/custom-axios';

export const getInvitation = (params?: GetInvitationParams, signal?: AbortSignal) => {
	return customAxiosRequest<void>({ url: `/invitation`, method: 'GET', params, signal });
};

export const getGetInvitationQueryKey = (params?: GetInvitationParams) => {
	return [`/invitation`, ...(params ? [params] : [])] as const;
};

export const getGetInvitationQueryOptions = <
	TData = Awaited<ReturnType<typeof getInvitation>>,
	TError = unknown
>(
	params?: GetInvitationParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetInvitationQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvitation>>> = ({ signal }) =>
		getInvitation(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getInvitation>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInvitationQueryResult = NonNullable<Awaited<ReturnType<typeof getInvitation>>>;
export type GetInvitationQueryError = unknown;

export function useGetInvitation<
	TData = Awaited<ReturnType<typeof getInvitation>>,
	TError = unknown
>(
	params: undefined | GetInvitationParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitation>>,
					TError,
					Awaited<ReturnType<typeof getInvitation>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInvitation<
	TData = Awaited<ReturnType<typeof getInvitation>>,
	TError = unknown
>(
	params?: GetInvitationParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getInvitation>>,
					TError,
					Awaited<ReturnType<typeof getInvitation>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetInvitation<
	TData = Awaited<ReturnType<typeof getInvitation>>,
	TError = unknown
>(
	params?: GetInvitationParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetInvitation<
	TData = Awaited<ReturnType<typeof getInvitation>>,
	TError = unknown
>(
	params?: GetInvitationParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getInvitation>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetInvitationQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
