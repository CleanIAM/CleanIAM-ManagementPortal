/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiApplicationModel,
  CreateNewApplicationRequest,
  DeleteApiApplicationsIdParams,
  Error,
  GetApiApplicationsIdParams,
  GetApiApplicationsParams,
  OpenIdApplication,
  OpenIdApplicationCreated,
  OpenIdApplicationDeleted,
  OpenIdApplicationUpdated,
  PostApiApplicationsParams,
  PutApiApplicationsIdParams,
  UpdateApplicationRequest
} from '../cleanIAM.schemas';

import { customAxiosRequest } from '../../mutator/axios/custom-axios';

/**
 * @summary Show the main application page with a list of all applications.
 */
export const getApiApplications = (params?: GetApiApplicationsParams, signal?: AbortSignal) => {
  return customAxiosRequest<ApiApplicationModel[]>({
    url: `/api/applications`,
    method: 'GET',
    params,
    signal
  });
};

export const getGetApiApplicationsQueryKey = (params?: GetApiApplicationsParams) => {
  return [`/api/applications`, ...(params ? [params] : [])] as const;
};

export const getGetApiApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiApplications>>,
  TError = unknown
>(
  params?: GetApiApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiApplicationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplications>>> = ({ signal }) =>
    getApiApplications(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiApplicationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiApplications>>
>;
export type GetApiApplicationsQueryError = unknown;

export function useGetApiApplications<
  TData = Awaited<ReturnType<typeof getApiApplications>>,
  TError = unknown
>(
  params: undefined | GetApiApplicationsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplications>>,
          TError,
          Awaited<ReturnType<typeof getApiApplications>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiApplications<
  TData = Awaited<ReturnType<typeof getApiApplications>>,
  TError = unknown
>(
  params?: GetApiApplicationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplications>>,
          TError,
          Awaited<ReturnType<typeof getApiApplications>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiApplications<
  TData = Awaited<ReturnType<typeof getApiApplications>>,
  TError = unknown
>(
  params?: GetApiApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Show the main application page with a list of all applications.
 */

export function useGetApiApplications<
  TData = Awaited<ReturnType<typeof getApiApplications>>,
  TError = unknown
>(
  params?: GetApiApplicationsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiApplicationsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create a new application
 */
export const postApiApplications = (
  createNewApplicationRequest: CreateNewApplicationRequest,
  params?: PostApiApplicationsParams,
  signal?: AbortSignal
) => {
  return customAxiosRequest<OpenIdApplicationCreated>({
    url: `/api/applications`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createNewApplicationRequest,
    params,
    signal
  });
};

export const getPostApiApplicationsMutationOptions = <
  TError = Error,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiApplications>>,
    TError,
    { data: CreateNewApplicationRequest; params?: PostApiApplicationsParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiApplications>>,
  TError,
  { data: CreateNewApplicationRequest; params?: PostApiApplicationsParams },
  TContext
> => {
  const mutationKey = ['postApiApplications'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiApplications>>,
    { data: CreateNewApplicationRequest; params?: PostApiApplicationsParams }
  > = props => {
    const { data, params } = props ?? {};

    return postApiApplications(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiApplicationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiApplications>>
>;
export type PostApiApplicationsMutationBody = CreateNewApplicationRequest;
export type PostApiApplicationsMutationError = Error;

/**
 * @summary Create a new application
 */
export const usePostApiApplications = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiApplications>>,
      TError,
      { data: CreateNewApplicationRequest; params?: PostApiApplicationsParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postApiApplications>>,
  TError,
  { data: CreateNewApplicationRequest; params?: PostApiApplicationsParams },
  TContext
> => {
  const mutationOptions = getPostApiApplicationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get the application with the given id.
 */
export const getApiApplicationsId = (
  id: string,
  params?: GetApiApplicationsIdParams,
  signal?: AbortSignal
) => {
  return customAxiosRequest<OpenIdApplication>({
    url: `/api/applications/${id}`,
    method: 'GET',
    params,
    signal
  });
};

export const getGetApiApplicationsIdQueryKey = (
  id: string,
  params?: GetApiApplicationsIdParams
) => {
  return [`/api/applications/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetApiApplicationsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiApplicationsId>>,
  TError = Error
>(
  id: string,
  params?: GetApiApplicationsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiApplicationsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplicationsId>>> = ({ signal }) =>
    getApiApplicationsId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiApplicationsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiApplicationsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiApplicationsId>>
>;
export type GetApiApplicationsIdQueryError = Error;

export function useGetApiApplicationsId<
  TData = Awaited<ReturnType<typeof getApiApplicationsId>>,
  TError = Error
>(
  id: string,
  params: undefined | GetApiApplicationsIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationsId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiApplicationsId<
  TData = Awaited<ReturnType<typeof getApiApplicationsId>>,
  TError = Error
>(
  id: string,
  params?: GetApiApplicationsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationsId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiApplicationsId<
  TData = Awaited<ReturnType<typeof getApiApplicationsId>>,
  TError = Error
>(
  id: string,
  params?: GetApiApplicationsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get the application with the given id.
 */

export function useGetApiApplicationsId<
  TData = Awaited<ReturnType<typeof getApiApplicationsId>>,
  TError = Error
>(
  id: string,
  params?: GetApiApplicationsIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiApplicationsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update the application with the given id.
 */
export const putApiApplicationsId = (
  id: string,
  updateApplicationRequest: UpdateApplicationRequest,
  params?: PutApiApplicationsIdParams
) => {
  return customAxiosRequest<OpenIdApplicationUpdated>({
    url: `/api/applications/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateApplicationRequest,
    params
  });
};

export const getPutApiApplicationsIdMutationOptions = <
  TError = Error,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiApplicationsId>>,
    TError,
    { id: string; data: UpdateApplicationRequest; params?: PutApiApplicationsIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiApplicationsId>>,
  TError,
  { id: string; data: UpdateApplicationRequest; params?: PutApiApplicationsIdParams },
  TContext
> => {
  const mutationKey = ['putApiApplicationsId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiApplicationsId>>,
    { id: string; data: UpdateApplicationRequest; params?: PutApiApplicationsIdParams }
  > = props => {
    const { id, data, params } = props ?? {};

    return putApiApplicationsId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiApplicationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiApplicationsId>>
>;
export type PutApiApplicationsIdMutationBody = UpdateApplicationRequest;
export type PutApiApplicationsIdMutationError = Error;

/**
 * @summary Update the application with the given id.
 */
export const usePutApiApplicationsId = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiApplicationsId>>,
      TError,
      { id: string; data: UpdateApplicationRequest; params?: PutApiApplicationsIdParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putApiApplicationsId>>,
  TError,
  { id: string; data: UpdateApplicationRequest; params?: PutApiApplicationsIdParams },
  TContext
> => {
  const mutationOptions = getPutApiApplicationsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update the application with the given id.
 */
export const deleteApiApplicationsId = (id: string, params?: DeleteApiApplicationsIdParams) => {
  return customAxiosRequest<OpenIdApplicationDeleted>({
    url: `/api/applications/${id}`,
    method: 'DELETE',
    params
  });
};

export const getDeleteApiApplicationsIdMutationOptions = <
  TError = Error,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiApplicationsId>>,
    TError,
    { id: string; params?: DeleteApiApplicationsIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiApplicationsId>>,
  TError,
  { id: string; params?: DeleteApiApplicationsIdParams },
  TContext
> => {
  const mutationKey = ['deleteApiApplicationsId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiApplicationsId>>,
    { id: string; params?: DeleteApiApplicationsIdParams }
  > = props => {
    const { id, params } = props ?? {};

    return deleteApiApplicationsId(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiApplicationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiApplicationsId>>
>;

export type DeleteApiApplicationsIdMutationError = Error;

/**
 * @summary Update the application with the given id.
 */
export const useDeleteApiApplicationsId = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiApplicationsId>>,
      TError,
      { id: string; params?: DeleteApiApplicationsIdParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiApplicationsId>>,
  TError,
  { id: string; params?: DeleteApiApplicationsIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiApplicationsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
