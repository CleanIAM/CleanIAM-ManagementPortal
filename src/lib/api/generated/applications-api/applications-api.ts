/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiApplicationModel,
  Error,
  OpenIdApplication,
  OpenIdApplicationCreated,
  OpenIdApplicationDeleted,
  OpenIdApplicationUpdated,
  PostApiApplicationsParams,
  UpdateApplicationRequest
} from '../cleanIAM.schemas';

import { customFetch } from '../../custom-fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Show the main application page with a list of all applications.
 */
export type getApiApplicationsResponse200 = {
  data: ApiApplicationModel[]
  status: 200
}
    
export type getApiApplicationsResponseComposite = getApiApplicationsResponse200;
    
export type getApiApplicationsResponse = getApiApplicationsResponseComposite & {
  headers: Headers;
}

export const getGetApiApplicationsUrl = () => {


  

  return `/api/applications`
}

export const getApiApplications = async ( options?: RequestInit): Promise<getApiApplicationsResponse> => {
  
  return customFetch<getApiApplicationsResponse>(getGetApiApplicationsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetApiApplicationsQueryKey = () => {
    return [`/api/applications`] as const;
    }

    
export const getGetApiApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApplicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplications>>> = ({ signal }) => getApiApplications({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApplications>>>
export type GetApiApplicationsQueryError = unknown


export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplications>>,
          TError,
          Awaited<ReturnType<typeof getApiApplications>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplications>>,
          TError,
          Awaited<ReturnType<typeof getApiApplications>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Show the main application page with a list of all applications.
 */

export function useGetApiApplications<TData = Awaited<ReturnType<typeof getApiApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplications>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiApplicationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create new application
 */
export type postApiApplicationsResponse200 = {
  data: OpenIdApplicationCreated
  status: 200
}

export type postApiApplicationsResponse400 = {
  data: Error
  status: 400
}
    
export type postApiApplicationsResponseComposite = postApiApplicationsResponse200 | postApiApplicationsResponse400;
    
export type postApiApplicationsResponse = postApiApplicationsResponseComposite & {
  headers: Headers;
}

export const getPostApiApplicationsUrl = (params?: PostApiApplicationsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/applications?${stringifiedParams}` : `/api/applications`
}

export const postApiApplications = async (params?: PostApiApplicationsParams, options?: RequestInit): Promise<postApiApplicationsResponse> => {
  
  return customFetch<postApiApplicationsResponse>(getPostApiApplicationsUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getPostApiApplicationsMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext> => {
    
const mutationKey = ['postApiApplications'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiApplications>>, {params?: PostApiApplicationsParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiApplications(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiApplicationsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiApplications>>>
    
    export type PostApiApplicationsMutationError = Error

    /**
 * @summary Create new application
 */
export const usePostApiApplications = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplications>>, TError,{params?: PostApiApplicationsParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiApplications>>,
        TError,
        {params?: PostApiApplicationsParams},
        TContext
      > => {

      const mutationOptions = getPostApiApplicationsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get the application with the given id.
 */
export type getApiApplicationsIdResponse200 = {
  data: OpenIdApplication
  status: 200
}

export type getApiApplicationsIdResponse404 = {
  data: Error
  status: 404
}
    
export type getApiApplicationsIdResponseComposite = getApiApplicationsIdResponse200 | getApiApplicationsIdResponse404;
    
export type getApiApplicationsIdResponse = getApiApplicationsIdResponseComposite & {
  headers: Headers;
}

export const getGetApiApplicationsIdUrl = (id: string,) => {


  

  return `/api/applications/${id}`
}

export const getApiApplicationsId = async (id: string, options?: RequestInit): Promise<getApiApplicationsIdResponse> => {
  
  return customFetch<getApiApplicationsIdResponse>(getGetApiApplicationsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetApiApplicationsIdQueryKey = (id: string,) => {
    return [`/api/applications/${id}`] as const;
    }

    
export const getGetApiApplicationsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApplicationsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplicationsId>>> = ({ signal }) => getApiApplicationsId(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiApplicationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApplicationsId>>>
export type GetApiApplicationsIdQueryError = Error


export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationsId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get the application with the given id.
 */

export function useGetApiApplicationsId<TData = Awaited<ReturnType<typeof getApiApplicationsId>>, TError = Error>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationsId>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiApplicationsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update the application with the given id.
 */
export type putApiApplicationsIdResponse200 = {
  data: OpenIdApplicationUpdated
  status: 200
}

export type putApiApplicationsIdResponse404 = {
  data: Error
  status: 404
}
    
export type putApiApplicationsIdResponseComposite = putApiApplicationsIdResponse200 | putApiApplicationsIdResponse404;
    
export type putApiApplicationsIdResponse = putApiApplicationsIdResponseComposite & {
  headers: Headers;
}

export const getPutApiApplicationsIdUrl = (id: string,) => {


  

  return `/api/applications/${id}`
}

export const putApiApplicationsId = async (id: string,
    updateApplicationRequest: UpdateApplicationRequest, options?: RequestInit): Promise<putApiApplicationsIdResponse> => {
  
  return customFetch<putApiApplicationsIdResponse>(getPutApiApplicationsIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateApplicationRequest,)
  }
);}




export const getPutApiApplicationsIdMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext> => {
    
const mutationKey = ['putApiApplicationsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiApplicationsId>>, {id: string;data: UpdateApplicationRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiApplicationsId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiApplicationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiApplicationsId>>>
    export type PutApiApplicationsIdMutationBody = UpdateApplicationRequest
    export type PutApiApplicationsIdMutationError = Error

    /**
 * @summary Update the application with the given id.
 */
export const usePutApiApplicationsId = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiApplicationsId>>, TError,{id: string;data: UpdateApplicationRequest}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiApplicationsId>>,
        TError,
        {id: string;data: UpdateApplicationRequest},
        TContext
      > => {

      const mutationOptions = getPutApiApplicationsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Update the application with the given id.
 */
export type deleteApiApplicationsIdResponse200 = {
  data: OpenIdApplicationDeleted
  status: 200
}

export type deleteApiApplicationsIdResponse404 = {
  data: Error
  status: 404
}
    
export type deleteApiApplicationsIdResponseComposite = deleteApiApplicationsIdResponse200 | deleteApiApplicationsIdResponse404;
    
export type deleteApiApplicationsIdResponse = deleteApiApplicationsIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiApplicationsIdUrl = (id: string,) => {


  

  return `/api/applications/${id}`
}

export const deleteApiApplicationsId = async (id: string, options?: RequestInit): Promise<deleteApiApplicationsIdResponse> => {
  
  return customFetch<deleteApiApplicationsIdResponse>(getDeleteApiApplicationsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteApiApplicationsIdMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteApiApplicationsId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiApplicationsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiApplicationsId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiApplicationsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiApplicationsId>>>
    
    export type DeleteApiApplicationsIdMutationError = Error

    /**
 * @summary Update the application with the given id.
 */
export const useDeleteApiApplicationsId = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiApplicationsId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiApplicationsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiApplicationsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Test endpoint to check if the API is up and running.
 */
export type getTestResponse200 = {
  data: string
  status: 200
}
    
export type getTestResponseComposite = getTestResponse200;
    
export type getTestResponse = getTestResponseComposite & {
  headers: Headers;
}

export const getGetTestUrl = () => {


  

  return `/test`
}

export const getTest = async ( options?: RequestInit): Promise<getTestResponse> => {
  
  return customFetch<getTestResponse>(getGetTestUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetTestQueryKey = () => {
    return [`/test`] as const;
    }

    
export const getGetTestQueryOptions = <TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTestQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTest>>> = ({ signal }) => getTest({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTestQueryResult = NonNullable<Awaited<ReturnType<typeof getTest>>>
export type GetTestQueryError = unknown


export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTest>>,
          TError,
          Awaited<ReturnType<typeof getTest>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTest>>,
          TError,
          Awaited<ReturnType<typeof getTest>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Test endpoint to check if the API is up and running.
 */

export function useGetTest<TData = Awaited<ReturnType<typeof getTest>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTest>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTestQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



