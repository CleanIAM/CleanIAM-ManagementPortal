/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
export interface ApiApplicationModel {
	/** Gets or sets the id associated with the application. */
	id: string;
	applicationType: ApplicationType;
	/** Gets or sets the client identifier associated with the application. */
	clientId: string;
	clientType: ClientType;
	consentType: ConsentType;
	/**
	 * Gets or sets the display name associated with the application.
	 * @nullable
	 */
	displayName: string | null;
	/** Allowed scopes for the application. */
	scopes: string[];
	/** Allowed endpoints for the application. */
	endpoints: string[];
	/** Allowed grant types for the application. */
	grantTypes: string[];
	/** Allowed response types for the application. */
	responseTypes: string[];
	/** Gets the post-logout redirect URIs associated with the application. */
	postLogoutRedirectUris: string[];
	/** Gets the redirect URIs associated with the application. */
	redirectUris: string[];
	/** Gets the requirements associated with the application. */
	requirements: string[];
}

/**
 * Api user model
 */
export interface ApiUserModel {
	/** Id of the user */
	id: string;
	/** Email of the user */
	email: string;
	/** First name of the user */
	firstName: string;
	/** last name of the user */
	lastName: string;
	/** User roles */
	roles: UserRole[];
}

export type ApplicationType = (typeof ApplicationType)[keyof typeof ApplicationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationType = {
	native: 'native',
	web: 'web'
} as const;

export type ClientType = (typeof ClientType)[keyof typeof ClientType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClientType = {
	public: 'public',
	confidential: 'confidential'
} as const;

export type ConsentType = (typeof ConsentType)[keyof typeof ConsentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConsentType = {
	explicit: 'explicit',
	external: 'external',
	implicit: 'implicit',
	systematic: 'systematic'
} as const;

export interface Error {
	message: string;
	code: number;
}

export type JsonValueKind = (typeof JsonValueKind)[keyof typeof JsonValueKind];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JsonValueKind = {
	undefined: 'undefined',
	object: 'object',
	array: 'array',
	string: 'string',
	number: 'number',
	true: 'true',
	false: 'false',
	null: 'null'
} as const;

/**
 * Gets the additional properties associated with the application.
 */
export type OpenIdApplicationProperties = { [key: string]: unknown };

export interface OpenIdApplication {
	/** Gets or sets the id associated with the application. */
	id: string;
	applicationType: ApplicationType;
	/** Gets or sets the client identifier associated with the application. */
	clientId: string;
	clientType: ClientType;
	consentType: ConsentType;
	/**
	 * Gets or sets the display name associated with the application.
	 * @nullable
	 */
	displayName: string | null;
	/** Allowed scopes for the application. */
	scopes: string[];
	/** Allowed endpoints for the application. */
	endpoints: string[];
	/** Allowed grant types for the application. */
	grantTypes: string[];
	/** Allowed response types for the application. */
	responseTypes: string[];
	/** Gets the post-logout redirect URIs associated with the application. */
	postLogoutRedirectUris: string[];
	/** Gets the additional properties associated with the application. */
	properties: OpenIdApplicationProperties;
	/** Gets the redirect URIs associated with the application. */
	redirectUris: string[];
}

export type OpenIdApplicationCreatedSettings = { [key: string]: string };

export interface OpenIdApplicationCreated {
	id: string;
	applicationType: ApplicationType;
	clientId: string;
	/** @nullable */
	clientSecret: string | null;
	clientType: ClientType;
	consentType: ConsentType;
	/** @nullable */
	displayName: string | null;
	permissions: string[];
	postLogoutRedirectUris: string[];
	redirectUris: string[];
	requirements: string[];
	settings: OpenIdApplicationCreatedSettings;
}

export interface OpenIdApplicationDeleted {
	id: string;
	displayName: string;
}

export type OpenIdApplicationUpdatedSettings = { [key: string]: string };

export interface OpenIdApplicationUpdated {
	id: string;
	applicationType: ApplicationType;
	clientId: string;
	clientType: ClientType;
	consentType: ConsentType;
	/** @nullable */
	displayName: string | null;
	permissions: string[];
	postLogoutRedirectUris: string[];
	redirectUris: string[];
	requirements: string[];
	settings: OpenIdApplicationUpdatedSettings;
}

export interface StringStringValuesKeyValuePair {
	key: string;
	value: string[];
}

export interface UpdateApplicationRequest {
	/** Gets or sets the id associated with the application. */
	id: string;
	applicationType: ApplicationType;
	/** Gets or sets the client identifier associated with the application. */
	clientId: string;
	clientType: ClientType;
	consentType: ConsentType;
	/**
	 * Gets or sets the display name associated with the application.
	 * @nullable
	 */
	displayName: string | null;
	/** Allowed scopes for the application. */
	scopes: string[];
	/** Allowed endpoints for the application. */
	endpoints: string[];
	/** Allowed grant types for the application. */
	grantTypes: string[];
	/** Allowed response types for the application. */
	responseTypes: string[];
	/** Gets the post-logout redirect URIs associated with the application. */
	postLogoutRedirectUris: string[];
	/** Gets the redirect URIs associated with the application. */
	redirectUris: string[];
	/** Gets the requirements associated with the application. */
	requirements: string[];
}

export interface UserCreated {
	id: string;
	email: string;
	firstName: string;
	lastName: string;
	roles: UserRole[];
}

export interface UserDeleted {
	id: string;
	email: string;
	firstName: string;
	lastName: string;
	roles: UserRole[];
}

/**
 * Represents an event triggered when a user has been disabled within the system.
 */
export interface UserDisabled {
	/** Id of the user */
	id: string;
	/** Email address of the user */
	email: string;
	/** First name of the user */
	firstName: string;
	/** Last name of the user */
	lastName: string;
}

export type UserRole = (typeof UserRole)[keyof typeof UserRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
	user: 'user',
	admin: 'admin',
	superAdmin: 'superAdmin'
} as const;

export interface UserUpdated {
	id: string;
	email: string;
	firstName: string;
	lastName: string;
	roles: UserRole[];
}

export type PostApiApplicationsParams = {
	/**
	 * Gets or sets the id associated with the application.
	 */
	Id?: string;
	/**
	 * Gets or sets the application type associated with the application.
	 */
	ApplicationType?: ApplicationType;
	/**
	 * Gets or sets the client identifier associated with the application.
	 */
	ClientId?: string;
	/**
	 * Gets or sets the client type associated with the application.
	 */
	ClientType?: ClientType;
	/**
	 * Gets or sets the consent type associated with the application.
	 */
	ConsentType?: ConsentType;
	/**
	 * Gets or sets the display name associated with the application.
	 */
	DisplayName?: string;
	/**
	 * Allowed scopes for the application.
	 */
	Scopes?: string[];
	/**
	 * Allowed endpoints for the application.
	 */
	Endpoints?: string[];
	/**
	 * Allowed grant types for the application.
	 */
	GrantTypes?: string[];
	/**
	 * Allowed response types for the application.
	 */
	ResponseTypes?: string[];
	/**
	 * Gets the post-logout redirect URIs associated with the application.
	 */
	PostLogoutRedirectUris?: string[];
	/**
	 * Gets the redirect URIs associated with the application.
	 */
	RedirectUris?: string[];
	/**
	 * Gets the requirements associated with the application.
	 */
	Requirements?: string[];
};

export type PostConnectEndsessionParams = {
	'AccessToken'?: string;
	'AcrValues'?: string;
	'Assertion'?: string;
	'Audiences'?: string[];
	'Claims.ValueKind'?: JsonValueKind;
	'ClaimsLocales'?: string;
	'ClientAssertion'?: string;
	'ClientAssertionType'?: string;
	'ClientId'?: string;
	'ClientSecret'?: string;
	'Code'?: string;
	'CodeChallenge'?: string;
	'CodeChallengeMethod'?: string;
	'CodeVerifier'?: string;
	'DeviceCode'?: string;
	'Display'?: string;
	'GrantType'?: string;
	'IdentityProvider'?: string;
	'IdToken'?: string;
	'IdTokenHint'?: string;
	'LoginHint'?: string;
	'MaxAge'?: number;
	'Nonce'?: string;
	'Password'?: string;
	'PostLogoutRedirectUri'?: string;
	'Prompt'?: string;
	'RedirectUri'?: string;
	'RefreshToken'?: string;
	'Request'?: string;
	'RequestId'?: string;
	'RequestUri'?: string;
	'Resources'?: string[];
	'ResponseMode'?: string;
	'ResponseType'?: string;
	'Scope'?: string;
	'State'?: string;
	'Token'?: string;
	'TokenTypeHint'?: string;
	'Registration.ValueKind'?: JsonValueKind;
	'UiLocales'?: string;
	'UserCode'?: string;
	'Username'?: string;
	'Count'?: number;
	/**
	 * Indicates if the user should be sign out also from the CleanIAM.
	 */
	'FullLogout': boolean;
	/**
	 * Parameters to be passed to the end session endpoint.
	 */
	'Parameters'?: StringStringValuesKeyValuePair[];
};

export type PostEmailVerificationBody = {
	RequestId?: string;
};

export type GetErrorParams = {
	error?: string;
	errorDescription?: string;
};

export type GetExternalProvidersRequestProviderParams = {
	request?: string;
};

export type PostPasswordResetBody = {
	Email: string;
};

export type PostPasswordResetRequestIdBody = {
	RequestId: string;
	NewPassword: string;
	ConfirmPassword: string;
};

export type GetSigninParams = {
	request?: string;
	error?: string;
};

export type PostSigninParams = {
	request?: string;
};

export type PostSigninBody = {
	Email: string;
	/** @maxLength 128 */
	Password: string;
};

export type PostSignupBody = {
	Email: string;
	/** @minLength 3 */
	FirstName: string;
	/** @minLength 3 */
	LastName: string;
	Password: string;
};

export type PostApiUsersParams = {
	/**
	 * Email of the user
	 */
	Email: string;
	/**
	 * First name of the user
	 */
	FirstName: string;
	/**
	 * last name of the user
	 */
	LastName: string;
	/**
	 * User roles
	 */
	Roles: UserRole[];
};

export type PutApiUsersIdParams = {
	/**
	 * Email of the user
	 */
	Email: string;
	/**
	 * First name of the user
	 */
	FirstName: string;
	/**
	 * last name of the user
	 */
	LastName: string;
	/**
	 * User roles
	 */
	Roles: UserRole[];
};
