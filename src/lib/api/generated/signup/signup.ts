/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult
} from '@tanstack/react-query';

import type { PostSignupBody } from '../cleanIAM.schemas';

import { customFetch } from '../../custom-fetch';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getSignupResponse200 = {
	data: void;
	status: 200;
};

export type getSignupResponseComposite = getSignupResponse200;

export type getSignupResponse = getSignupResponseComposite & {
	headers: Headers;
};

export const getGetSignupUrl = () => {
	return `/signup`;
};

export const getSignup = async (options?: RequestInit): Promise<getSignupResponse> => {
	return customFetch<getSignupResponse>(getGetSignupUrl(), {
		...options,
		method: 'GET'
	});
};

export const getGetSignupQueryKey = () => {
	return [`/signup`] as const;
};

export const getGetSignupQueryOptions = <
	TData = Awaited<ReturnType<typeof getSignup>>,
	TError = unknown
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignup>>, TError, TData>>;
	request?: SecondParameter<typeof customFetch>;
}) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetSignupQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSignup>>> = ({ signal }) =>
		getSignup({ signal, ...requestOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSignup>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSignupQueryResult = NonNullable<Awaited<ReturnType<typeof getSignup>>>;
export type GetSignupQueryError = unknown;

export function useGetSignup<TData = Awaited<ReturnType<typeof getSignup>>, TError = unknown>(
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignup>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSignup>>,
					TError,
					Awaited<ReturnType<typeof getSignup>>
				>,
				'initialData'
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSignup<TData = Awaited<ReturnType<typeof getSignup>>, TError = unknown>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignup>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSignup>>,
					TError,
					Awaited<ReturnType<typeof getSignup>>
				>,
				'initialData'
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSignup<TData = Awaited<ReturnType<typeof getSignup>>, TError = unknown>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignup>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSignup<TData = Awaited<ReturnType<typeof getSignup>>, TError = unknown>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSignup>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetSignupQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export type postSignupResponse200 = {
	data: void;
	status: 200;
};

export type postSignupResponseComposite = postSignupResponse200;

export type postSignupResponse = postSignupResponseComposite & {
	headers: Headers;
};

export const getPostSignupUrl = () => {
	return `/signup`;
};

export const postSignup = async (
	postSignupBody: PostSignupBody,
	options?: RequestInit
): Promise<postSignupResponse> => {
	const formData = new FormData();
	formData.append(`Email`, postSignupBody.Email);
	formData.append(`FirstName`, postSignupBody.FirstName);
	formData.append(`LastName`, postSignupBody.LastName);
	formData.append(`Password`, postSignupBody.Password);

	return customFetch<postSignupResponse>(getPostSignupUrl(), {
		...options,
		method: 'POST',
		body: formData
	});
};

export const getPostSignupMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postSignup>>,
		TError,
		{ data: PostSignupBody },
		TContext
	>;
	request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postSignup>>,
	TError,
	{ data: PostSignupBody },
	TContext
> => {
	const mutationKey = ['postSignup'];
	const { mutation: mutationOptions, request: requestOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, request: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postSignup>>,
		{ data: PostSignupBody }
	> = props => {
		const { data } = props ?? {};

		return postSignup(data, requestOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostSignupMutationResult = NonNullable<Awaited<ReturnType<typeof postSignup>>>;
export type PostSignupMutationBody = PostSignupBody;
export type PostSignupMutationError = unknown;

export const usePostSignup = <TError = unknown, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postSignup>>,
			TError,
			{ data: PostSignupBody },
			TContext
		>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof postSignup>>,
	TError,
	{ data: PostSignupBody },
	TContext
> => {
	const mutationOptions = getPostSignupMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
