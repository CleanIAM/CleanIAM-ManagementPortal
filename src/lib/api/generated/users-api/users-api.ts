/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiUserModel,
  DeleteApiUsersIdguidParams,
  Error,
  GetApiUsersIdguidParams,
  PostApiUsersParams,
  PutApiUsersIdguidParams,
  UserCreated,
  UserDeleted,
  UserUpdated
} from '../cleanIAM.schemas';

import { customFetch } from '../../custom-fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Get all users
 */
export type getApiUsersResponse200 = {
  data: ApiUserModel[]
  status: 200
}

export type getApiUsersResponse500 = {
  data: Error
  status: 500
}
    
export type getApiUsersResponseComposite = getApiUsersResponse200 | getApiUsersResponse500;
    
export type getApiUsersResponse = getApiUsersResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersUrl = () => {


  

  return `/api/users`
}

export const getApiUsers = async ( options?: RequestInit): Promise<getApiUsersResponse> => {
  
  return customFetch<getApiUsersResponse>(getGetApiUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetApiUsersQueryKey = () => {
    return [`/api/users`] as const;
    }

    
export const getGetApiUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) => getApiUsers({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersQueryError = Error


export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all users
 */

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = Error>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create new user
 */
export type postApiUsersResponse200 = {
  data: UserCreated
  status: 200
}

export type postApiUsersResponse400 = {
  data: Error
  status: 400
}
    
export type postApiUsersResponseComposite = postApiUsersResponse200 | postApiUsersResponse400;
    
export type postApiUsersResponse = postApiUsersResponseComposite & {
  headers: Headers;
}

export const getPostApiUsersUrl = (params: PostApiUsersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/users?${stringifiedParams}` : `/api/users`
}

export const postApiUsers = async (params: PostApiUsersParams, options?: RequestInit): Promise<postApiUsersResponse> => {
  
  return customFetch<postApiUsersResponse>(getPostApiUsersUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getPostApiUsersMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext> => {
    
const mutationKey = ['postApiUsers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUsers>>, {params: PostApiUsersParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiUsers(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUsers>>>
    
    export type PostApiUsersMutationError = Error

    /**
 * @summary Create new user
 */
export const usePostApiUsers = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUsers>>, TError,{params: PostApiUsersParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiUsers>>,
        TError,
        {params: PostApiUsersParams},
        TContext
      > => {

      const mutationOptions = getPostApiUsersMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get specific user by its id
 */
export type getApiUsersIdguidResponse200 = {
  data: ApiUserModel
  status: 200
}

export type getApiUsersIdguidResponse404 = {
  data: Error
  status: 404
}
    
export type getApiUsersIdguidResponseComposite = getApiUsersIdguidResponse200 | getApiUsersIdguidResponse404;
    
export type getApiUsersIdguidResponse = getApiUsersIdguidResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersIdguidUrl = (params?: GetApiUsersIdguidParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/users/id:guid?${stringifiedParams}` : `/api/users/id:guid`
}

export const getApiUsersIdguid = async (params?: GetApiUsersIdguidParams, options?: RequestInit): Promise<getApiUsersIdguidResponse> => {
  
  return customFetch<getApiUsersIdguidResponse>(getGetApiUsersIdguidUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetApiUsersIdguidQueryKey = (params?: GetApiUsersIdguidParams,) => {
    return [`/api/users/id:guid`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiUsersIdguidQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersIdguidQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersIdguid>>> = ({ signal }) => getApiUsersIdguid(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersIdguidQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersIdguid>>>
export type GetApiUsersIdguidQueryError = Error


export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params: undefined |  GetApiUsersIdguidParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdguid>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdguid>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdguid>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdguid>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get specific user by its id
 */

export function useGetApiUsersIdguid<TData = Awaited<ReturnType<typeof getApiUsersIdguid>>, TError = Error>(
 params?: GetApiUsersIdguidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersIdguid>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersIdguidQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update user
 */
export type putApiUsersIdguidResponse200 = {
  data: UserUpdated
  status: 200
}

export type putApiUsersIdguidResponse400 = {
  data: Error
  status: 400
}
    
export type putApiUsersIdguidResponseComposite = putApiUsersIdguidResponse200 | putApiUsersIdguidResponse400;
    
export type putApiUsersIdguidResponse = putApiUsersIdguidResponseComposite & {
  headers: Headers;
}

export const getPutApiUsersIdguidUrl = (params: PutApiUsersIdguidParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/users/id:guid?${stringifiedParams}` : `/api/users/id:guid`
}

export const putApiUsersIdguid = async (params: PutApiUsersIdguidParams, options?: RequestInit): Promise<putApiUsersIdguidResponse> => {
  
  return customFetch<putApiUsersIdguidResponse>(getPutApiUsersIdguidUrl(params),
  {      
    ...options,
    method: 'PUT'
    
    
  }
);}




export const getPutApiUsersIdguidMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext> => {
    
const mutationKey = ['putApiUsersIdguid'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersIdguid>>, {params: PutApiUsersIdguidParams}> = (props) => {
          const {params} = props ?? {};

          return  putApiUsersIdguid(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersIdguidMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersIdguid>>>
    
    export type PutApiUsersIdguidMutationError = Error

    /**
 * @summary Update user
 */
export const usePutApiUsersIdguid = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersIdguid>>, TError,{params: PutApiUsersIdguidParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersIdguid>>,
        TError,
        {params: PutApiUsersIdguidParams},
        TContext
      > => {

      const mutationOptions = getPutApiUsersIdguidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete user
 */
export type deleteApiUsersIdguidResponse200 = {
  data: UserDeleted
  status: 200
}

export type deleteApiUsersIdguidResponse404 = {
  data: Error
  status: 404
}
    
export type deleteApiUsersIdguidResponseComposite = deleteApiUsersIdguidResponse200 | deleteApiUsersIdguidResponse404;
    
export type deleteApiUsersIdguidResponse = deleteApiUsersIdguidResponseComposite & {
  headers: Headers;
}

export const getDeleteApiUsersIdguidUrl = (params?: DeleteApiUsersIdguidParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/users/id:guid?${stringifiedParams}` : `/api/users/id:guid`
}

export const deleteApiUsersIdguid = async (params?: DeleteApiUsersIdguidParams, options?: RequestInit): Promise<deleteApiUsersIdguidResponse> => {
  
  return customFetch<deleteApiUsersIdguidResponse>(getDeleteApiUsersIdguidUrl(params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteApiUsersIdguidMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext> => {
    
const mutationKey = ['deleteApiUsersIdguid'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, {params?: DeleteApiUsersIdguidParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteApiUsersIdguid(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUsersIdguidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsersIdguid>>>
    
    export type DeleteApiUsersIdguidMutationError = Error

    /**
 * @summary Delete user
 */
export const useDeleteApiUsersIdguid = <TError = Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersIdguid>>, TError,{params?: DeleteApiUsersIdguidParams}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUsersIdguid>>,
        TError,
        {params?: DeleteApiUsersIdguidParams},
        TContext
      > => {

      const mutationOptions = getDeleteApiUsersIdguidMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    