/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult
} from '@tanstack/react-query';

import type { GetErrorParams } from '../cleanIAM.schemas';

import { customFetch } from '../../custom-fetch';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getErrorResponse200 = {
	data: void;
	status: 200;
};

export type getErrorResponseComposite = getErrorResponse200;

export type getErrorResponse = getErrorResponseComposite & {
	headers: Headers;
};

export const getGetErrorUrl = (params?: GetErrorParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0 ? `/error?${stringifiedParams}` : `/error`;
};

export const getError = async (
	params?: GetErrorParams,
	options?: RequestInit
): Promise<getErrorResponse> => {
	return customFetch<getErrorResponse>(getGetErrorUrl(params), {
		...options,
		method: 'GET'
	});
};

export const getGetErrorQueryKey = (params?: GetErrorParams) => {
	return [`/error`, ...(params ? [params] : [])] as const;
};

export const getGetErrorQueryOptions = <
	TData = Awaited<ReturnType<typeof getError>>,
	TError = unknown
>(
	params?: GetErrorParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getError>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	}
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetErrorQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getError>>> = ({ signal }) =>
		getError(params, { signal, ...requestOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getError>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetErrorQueryResult = NonNullable<Awaited<ReturnType<typeof getError>>>;
export type GetErrorQueryError = unknown;

export function useGetError<TData = Awaited<ReturnType<typeof getError>>, TError = unknown>(
	params: undefined | GetErrorParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getError>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getError>>,
					TError,
					Awaited<ReturnType<typeof getError>>
				>,
				'initialData'
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetError<TData = Awaited<ReturnType<typeof getError>>, TError = unknown>(
	params?: GetErrorParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getError>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getError>>,
					TError,
					Awaited<ReturnType<typeof getError>>
				>,
				'initialData'
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetError<TData = Awaited<ReturnType<typeof getError>>, TError = unknown>(
	params?: GetErrorParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getError>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetError<TData = Awaited<ReturnType<typeof getError>>, TError = unknown>(
	params?: GetErrorParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getError>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetErrorQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export type getErrorErrorCodeResponse200 = {
	data: void;
	status: 200;
};

export type getErrorErrorCodeResponseComposite = getErrorErrorCodeResponse200;

export type getErrorErrorCodeResponse = getErrorErrorCodeResponseComposite & {
	headers: Headers;
};

export const getGetErrorErrorCodeUrl = (errorCode: number) => {
	return `/error/${errorCode}`;
};

export const getErrorErrorCode = async (
	errorCode: number,
	options?: RequestInit
): Promise<getErrorErrorCodeResponse> => {
	return customFetch<getErrorErrorCodeResponse>(getGetErrorErrorCodeUrl(errorCode), {
		...options,
		method: 'GET'
	});
};

export const getGetErrorErrorCodeQueryKey = (errorCode: number) => {
	return [`/error/${errorCode}`] as const;
};

export const getGetErrorErrorCodeQueryOptions = <
	TData = Awaited<ReturnType<typeof getErrorErrorCode>>,
	TError = unknown
>(
	errorCode: number,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getErrorErrorCode>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	}
) => {
	const { query: queryOptions, request: requestOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetErrorErrorCodeQueryKey(errorCode);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getErrorErrorCode>>> = ({ signal }) =>
		getErrorErrorCode(errorCode, { signal, ...requestOptions });

	return { queryKey, queryFn, enabled: !!errorCode, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getErrorErrorCode>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetErrorErrorCodeQueryResult = NonNullable<
	Awaited<ReturnType<typeof getErrorErrorCode>>
>;
export type GetErrorErrorCodeQueryError = unknown;

export function useGetErrorErrorCode<
	TData = Awaited<ReturnType<typeof getErrorErrorCode>>,
	TError = unknown
>(
	errorCode: number,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getErrorErrorCode>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getErrorErrorCode>>,
					TError,
					Awaited<ReturnType<typeof getErrorErrorCode>>
				>,
				'initialData'
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetErrorErrorCode<
	TData = Awaited<ReturnType<typeof getErrorErrorCode>>,
	TError = unknown
>(
	errorCode: number,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getErrorErrorCode>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getErrorErrorCode>>,
					TError,
					Awaited<ReturnType<typeof getErrorErrorCode>>
				>,
				'initialData'
			>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetErrorErrorCode<
	TData = Awaited<ReturnType<typeof getErrorErrorCode>>,
	TError = unknown
>(
	errorCode: number,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getErrorErrorCode>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetErrorErrorCode<
	TData = Awaited<ReturnType<typeof getErrorErrorCode>>,
	TError = unknown
>(
	errorCode: number,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getErrorErrorCode>>, TError, TData>>;
		request?: SecondParameter<typeof customFetch>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetErrorErrorCodeQueryOptions(errorCode, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
