/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type { GetMfaTotpParams, PostMfaTotpBody, PostMfaTotpParams } from '../cleanIAM.schemas';

import { customAxiosRequest } from '../../mutator/axios/custom-axios';

/**
 * @summary Shows the MFA input from the user.
 */
export const getMfaTotp = (params?: GetMfaTotpParams, signal?: AbortSignal) => {
  return customAxiosRequest<void>({ url: `/mfa/totp`, method: 'GET', params, signal });
};

export const getGetMfaTotpQueryKey = (params?: GetMfaTotpParams) => {
  return [`/mfa/totp`, ...(params ? [params] : [])] as const;
};

export const getGetMfaTotpQueryOptions = <
  TData = Awaited<ReturnType<typeof getMfaTotp>>,
  TError = unknown
>(
  params?: GetMfaTotpParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMfaTotp>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMfaTotpQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMfaTotp>>> = ({ signal }) =>
    getMfaTotp(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMfaTotp>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMfaTotpQueryResult = NonNullable<Awaited<ReturnType<typeof getMfaTotp>>>;
export type GetMfaTotpQueryError = unknown;

export function useGetMfaTotp<TData = Awaited<ReturnType<typeof getMfaTotp>>, TError = unknown>(
  params: undefined | GetMfaTotpParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMfaTotp>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMfaTotp>>,
          TError,
          Awaited<ReturnType<typeof getMfaTotp>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMfaTotp<TData = Awaited<ReturnType<typeof getMfaTotp>>, TError = unknown>(
  params?: GetMfaTotpParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMfaTotp>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMfaTotp>>,
          TError,
          Awaited<ReturnType<typeof getMfaTotp>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMfaTotp<TData = Awaited<ReturnType<typeof getMfaTotp>>, TError = unknown>(
  params?: GetMfaTotpParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMfaTotp>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Shows the MFA input from the user.
 */

export function useGetMfaTotp<TData = Awaited<ReturnType<typeof getMfaTotp>>, TError = unknown>(
  params?: GetMfaTotpParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMfaTotp>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMfaTotpQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Handles the MFA input from the user.
 */
export const postMfaTotp = (
  postMfaTotpBody: PostMfaTotpBody,
  params?: PostMfaTotpParams,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  formData.append('Totp', postMfaTotpBody.Totp);

  return customAxiosRequest<void>({
    url: `/mfa/totp`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
    signal
  });
};

export const getPostMfaTotpMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMfaTotp>>,
    TError,
    { data: PostMfaTotpBody; params?: PostMfaTotpParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMfaTotp>>,
  TError,
  { data: PostMfaTotpBody; params?: PostMfaTotpParams },
  TContext
> => {
  const mutationKey = ['postMfaTotp'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMfaTotp>>,
    { data: PostMfaTotpBody; params?: PostMfaTotpParams }
  > = props => {
    const { data, params } = props ?? {};

    return postMfaTotp(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMfaTotpMutationResult = NonNullable<Awaited<ReturnType<typeof postMfaTotp>>>;
export type PostMfaTotpMutationBody = PostMfaTotpBody;
export type PostMfaTotpMutationError = unknown;

/**
 * @summary Handles the MFA input from the user.
 */
export const usePostMfaTotp = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postMfaTotp>>,
      TError,
      { data: PostMfaTotpBody; params?: PostMfaTotpParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postMfaTotp>>,
  TError,
  { data: PostMfaTotpBody; params?: PostMfaTotpParams },
  TContext
> => {
  const mutationOptions = getPostMfaTotpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
