/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  UpdateMfaRequest
} from '../cleanIAM.schemas';

import { customAxiosRequest } from '../../axios/custom-axios';




/**
 * @summary Enable or disable MFA for the current user
 */
export const putMfaEnabled = (
    updateMfaRequest: UpdateMfaRequest,
 ) => {
      
      
      return customAxiosRequest<void>(
      {url: `/mfa/enabled`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateMfaRequest
    },
      );
    }
  


export const getPutMfaEnabledMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMfaEnabled>>, TError,{data: UpdateMfaRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putMfaEnabled>>, TError,{data: UpdateMfaRequest}, TContext> => {
    
const mutationKey = ['putMfaEnabled'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMfaEnabled>>, {data: UpdateMfaRequest}> = (props) => {
          const {data} = props ?? {};

          return  putMfaEnabled(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMfaEnabledMutationResult = NonNullable<Awaited<ReturnType<typeof putMfaEnabled>>>
    export type PutMfaEnabledMutationBody = UpdateMfaRequest
    export type PutMfaEnabledMutationError = unknown

    /**
 * @summary Enable or disable MFA for the current user
 */
export const usePutMfaEnabled = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMfaEnabled>>, TError,{data: UpdateMfaRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putMfaEnabled>>,
        TError,
        {data: UpdateMfaRequest},
        TContext
      > => {

      const mutationOptions = getPutMfaEnabledMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    