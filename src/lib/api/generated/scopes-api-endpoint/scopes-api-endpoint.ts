/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateNewScopeRequest,
  DeleteApiScopesScopeNameParams,
  Error,
  GetApiScopesDefaultParams,
  GetApiScopesParams,
  PostApiScopesParams,
  PutApiScopesScopeNameParams,
  Scope,
  ScopeCreated,
  ScopeDeleted,
  ScopeUpdated,
  UpdateScopeRequest
} from '../cleanIAM.schemas';

import { customAxiosRequest } from '../../mutator/axios/custom-axios';

/**
 * @summary Get the list of all scopes.
 */
export const getApiScopes = (params?: GetApiScopesParams, signal?: AbortSignal) => {
  return customAxiosRequest<Scope[]>({ url: `/api/scopes`, method: 'GET', params, signal });
};

export const getGetApiScopesQueryKey = (params?: GetApiScopesParams) => {
  return [`/api/scopes`, ...(params ? [params] : [])] as const;
};

export const getGetApiScopesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScopes>>,
  TError = Error
>(
  params?: GetApiScopesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiScopesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiScopes>>> = ({ signal }) =>
    getApiScopes(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiScopes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScopesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiScopes>>>;
export type GetApiScopesQueryError = Error;

export function useGetApiScopes<TData = Awaited<ReturnType<typeof getApiScopes>>, TError = Error>(
  params: undefined | GetApiScopesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiScopes>>,
          TError,
          Awaited<ReturnType<typeof getApiScopes>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiScopes<TData = Awaited<ReturnType<typeof getApiScopes>>, TError = Error>(
  params?: GetApiScopesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiScopes>>,
          TError,
          Awaited<ReturnType<typeof getApiScopes>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiScopes<TData = Awaited<ReturnType<typeof getApiScopes>>, TError = Error>(
  params?: GetApiScopesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get the list of all scopes.
 */

export function useGetApiScopes<TData = Awaited<ReturnType<typeof getApiScopes>>, TError = Error>(
  params?: GetApiScopesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScopesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create a new scope.
 */
export const postApiScopes = (
  createNewScopeRequest: CreateNewScopeRequest,
  params?: PostApiScopesParams,
  signal?: AbortSignal
) => {
  return customAxiosRequest<ScopeCreated>({
    url: `/api/scopes`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createNewScopeRequest,
    params,
    signal
  });
};

export const getPostApiScopesMutationOptions = <TError = Error, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiScopes>>,
    TError,
    { data: CreateNewScopeRequest; params?: PostApiScopesParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiScopes>>,
  TError,
  { data: CreateNewScopeRequest; params?: PostApiScopesParams },
  TContext
> => {
  const mutationKey = ['postApiScopes'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiScopes>>,
    { data: CreateNewScopeRequest; params?: PostApiScopesParams }
  > = props => {
    const { data, params } = props ?? {};

    return postApiScopes(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiScopesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiScopes>>>;
export type PostApiScopesMutationBody = CreateNewScopeRequest;
export type PostApiScopesMutationError = Error;

/**
 * @summary Create a new scope.
 */
export const usePostApiScopes = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiScopes>>,
      TError,
      { data: CreateNewScopeRequest; params?: PostApiScopesParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postApiScopes>>,
  TError,
  { data: CreateNewScopeRequest; params?: PostApiScopesParams },
  TContext
> => {
  const mutationOptions = getPostApiScopesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get the list of default scopes.
 */
export const getApiScopesDefault = (params?: GetApiScopesDefaultParams, signal?: AbortSignal) => {
  return customAxiosRequest<Scope[]>({ url: `/api/scopes/default`, method: 'GET', params, signal });
};

export const getGetApiScopesDefaultQueryKey = (params?: GetApiScopesDefaultParams) => {
  return [`/api/scopes/default`, ...(params ? [params] : [])] as const;
};

export const getGetApiScopesDefaultQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScopesDefault>>,
  TError = Error
>(
  params?: GetApiScopesDefaultParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiScopesDefault>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiScopesDefaultQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiScopesDefault>>> = ({ signal }) =>
    getApiScopesDefault(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiScopesDefault>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScopesDefaultQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiScopesDefault>>
>;
export type GetApiScopesDefaultQueryError = Error;

export function useGetApiScopesDefault<
  TData = Awaited<ReturnType<typeof getApiScopesDefault>>,
  TError = Error
>(
  params: undefined | GetApiScopesDefaultParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiScopesDefault>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiScopesDefault>>,
          TError,
          Awaited<ReturnType<typeof getApiScopesDefault>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiScopesDefault<
  TData = Awaited<ReturnType<typeof getApiScopesDefault>>,
  TError = Error
>(
  params?: GetApiScopesDefaultParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiScopesDefault>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiScopesDefault>>,
          TError,
          Awaited<ReturnType<typeof getApiScopesDefault>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiScopesDefault<
  TData = Awaited<ReturnType<typeof getApiScopesDefault>>,
  TError = Error
>(
  params?: GetApiScopesDefaultParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiScopesDefault>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get the list of default scopes.
 */

export function useGetApiScopesDefault<
  TData = Awaited<ReturnType<typeof getApiScopesDefault>>,
  TError = Error
>(
  params?: GetApiScopesDefaultParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiScopesDefault>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScopesDefaultQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update a scope.
 */
export const putApiScopesScopeName = (
  scopeName: string,
  updateScopeRequest: UpdateScopeRequest,
  params?: PutApiScopesScopeNameParams
) => {
  return customAxiosRequest<ScopeUpdated>({
    url: `/api/scopes/${scopeName}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateScopeRequest,
    params
  });
};

export const getPutApiScopesScopeNameMutationOptions = <
  TError = Error,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiScopesScopeName>>,
    TError,
    { scopeName: string; data: UpdateScopeRequest; params?: PutApiScopesScopeNameParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiScopesScopeName>>,
  TError,
  { scopeName: string; data: UpdateScopeRequest; params?: PutApiScopesScopeNameParams },
  TContext
> => {
  const mutationKey = ['putApiScopesScopeName'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiScopesScopeName>>,
    { scopeName: string; data: UpdateScopeRequest; params?: PutApiScopesScopeNameParams }
  > = props => {
    const { scopeName, data, params } = props ?? {};

    return putApiScopesScopeName(scopeName, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiScopesScopeNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiScopesScopeName>>
>;
export type PutApiScopesScopeNameMutationBody = UpdateScopeRequest;
export type PutApiScopesScopeNameMutationError = Error;

/**
 * @summary Update a scope.
 */
export const usePutApiScopesScopeName = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiScopesScopeName>>,
      TError,
      { scopeName: string; data: UpdateScopeRequest; params?: PutApiScopesScopeNameParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof putApiScopesScopeName>>,
  TError,
  { scopeName: string; data: UpdateScopeRequest; params?: PutApiScopesScopeNameParams },
  TContext
> => {
  const mutationOptions = getPutApiScopesScopeNameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a scope.
 */
export const deleteApiScopesScopeName = (
  scopeName: string,
  params?: DeleteApiScopesScopeNameParams
) => {
  return customAxiosRequest<ScopeDeleted>({
    url: `/api/scopes/${scopeName}`,
    method: 'DELETE',
    params
  });
};

export const getDeleteApiScopesScopeNameMutationOptions = <
  TError = Error,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiScopesScopeName>>,
    TError,
    { scopeName: string; params?: DeleteApiScopesScopeNameParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiScopesScopeName>>,
  TError,
  { scopeName: string; params?: DeleteApiScopesScopeNameParams },
  TContext
> => {
  const mutationKey = ['deleteApiScopesScopeName'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiScopesScopeName>>,
    { scopeName: string; params?: DeleteApiScopesScopeNameParams }
  > = props => {
    const { scopeName, params } = props ?? {};

    return deleteApiScopesScopeName(scopeName, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiScopesScopeNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiScopesScopeName>>
>;

export type DeleteApiScopesScopeNameMutationError = Error;

/**
 * @summary Delete a scope.
 */
export const useDeleteApiScopesScopeName = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiScopesScopeName>>,
      TError,
      { scopeName: string; params?: DeleteApiScopesScopeNameParams },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiScopesScopeName>>,
  TError,
  { scopeName: string; params?: DeleteApiScopesScopeNameParams },
  TContext
> => {
  const mutationOptions = getDeleteApiScopesScopeNameMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
