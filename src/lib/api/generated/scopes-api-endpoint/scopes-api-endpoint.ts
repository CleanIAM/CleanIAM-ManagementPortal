/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * CleanIAM
 * CleanIAM API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult
} from '@tanstack/react-query';

import type {
	CreateNewScopeRequest,
	Error,
	ItemWithTooltip,
	ScopeCreated
} from '../cleanIAM.schemas';

import { customAxiosRequest } from '../../mutator/axios/custom-axios';

/**
 * @summary Get the list of supported scopes.
 */
export const getApiScopes = (signal?: AbortSignal) => {
	return customAxiosRequest<ItemWithTooltip[]>({ url: `/api/scopes`, method: 'GET', signal });
};

export const getGetApiScopesQueryKey = () => {
	return [`/api/scopes`] as const;
};

export const getGetApiScopesQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiScopes>>,
	TError = Error
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiScopesQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiScopes>>> = ({ signal }) =>
		getApiScopes(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiScopes>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScopesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiScopes>>>;
export type GetApiScopesQueryError = Error;

export function useGetApiScopes<TData = Awaited<ReturnType<typeof getApiScopes>>, TError = Error>(
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiScopes>>,
					TError,
					Awaited<ReturnType<typeof getApiScopes>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiScopes<TData = Awaited<ReturnType<typeof getApiScopes>>, TError = Error>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiScopes>>,
					TError,
					Awaited<ReturnType<typeof getApiScopes>>
				>,
				'initialData'
			>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiScopes<TData = Awaited<ReturnType<typeof getApiScopes>>, TError = Error>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get the list of supported scopes.
 */

export function useGetApiScopes<TData = Awaited<ReturnType<typeof getApiScopes>>, TError = Error>(
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiScopes>>, TError, TData>>;
	},
	queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetApiScopesQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * @summary Create a new scope.
 */
export const postApiScopes = (
	createNewScopeRequest: CreateNewScopeRequest,
	signal?: AbortSignal
) => {
	return customAxiosRequest<ScopeCreated>({
		url: `/api/scopes`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createNewScopeRequest,
		signal
	});
};

export const getPostApiScopesMutationOptions = <TError = Error, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiScopes>>,
		TError,
		{ data: CreateNewScopeRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiScopes>>,
	TError,
	{ data: CreateNewScopeRequest },
	TContext
> => {
	const mutationKey = ['postApiScopes'];
	const { mutation: mutationOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey } };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiScopes>>,
		{ data: CreateNewScopeRequest }
	> = props => {
		const { data } = props ?? {};

		return postApiScopes(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiScopesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiScopes>>>;
export type PostApiScopesMutationBody = CreateNewScopeRequest;
export type PostApiScopesMutationError = Error;

/**
 * @summary Create a new scope.
 */
export const usePostApiScopes = <TError = Error, TContext = unknown>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiScopes>>,
			TError,
			{ data: CreateNewScopeRequest },
			TContext
		>;
	},
	queryClient?: QueryClient
): UseMutationResult<
	Awaited<ReturnType<typeof postApiScopes>>,
	TError,
	{ data: CreateNewScopeRequest },
	TContext
> => {
	const mutationOptions = getPostApiScopesMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};
